{"changed":true,"filter":false,"title":"test_spec.rb","tooltip":"/spec/test_spec.rb","value":"# encoding: UTF-8\nrequire 'my-gem'\nrequire 'spec_helper'\n\ndescribe Test do\n  before :each do\n    @q1 = Test.new(\"Hola?\", [\"Si\", \"No\", \"Quizas\", \"Puede\"], 3, 1)\n    @q2 = Test.new('¿Cual es la salida del siguiente codigo Ruby?' \"\\n\" 'class Xyz' \"\\n\"'   def pots'\" \\n\"'     @nice'\" \\n\"'   end'\" \\n\"' end '\"\\n\\n\"' xyz = Xyz.new'\" \\n\"' p xyz.pots', ['#<Xyz:0xa000208', 'nil', \"0\", \"Ninguna de las anteriores\"], 2, 2)\n    @q3 = BTest.new(\"La siguiente definicion de un hash en Ruby es valida: \\n hash_raro = { \\n   [1, 2, 3] => Object.new(), \\n   hash.new => :toto \\n }\", [\"Cierto\", \"Falso\"], 1,1);\n    @q4 = Test.new('Cual es la salida del siguiente codigo Ruby?'\"\\n\"' class Array'\"\\n\"'   def say_hi'\"\\n\"'     \"HEY!\"'\"\\n\"'   end'\"\\n\"' end'\"\\n\\n\"' p [1, \"bob\"].say_hi', [\"1\", \"bob\", \"HEY!\", \"Ninguna de las anteriores\"],3,3);\n    @q5 = Test.new('¿Cual es el tipo del objeto en el siguiente codigo en Ruby?'\"\\n\"'class Objeto'\"\\n\"'end', [\"Una instancia de la clase\", \"Una constante\", \"Un objeto\", \"Ninguna de las anteriores\"], 4,4);\n    @q6 = BTest.new(\"Es apropiado que una clase Tablero herede de una clase Juego\", [\"Cierto\", \"Falso\"], 1,1);\n\t\t@l = List.new(@q1)\n  end\n  \n  describe \"#Almacenamiento de Pregunta\" do\n    it \"Se guarda correctamente una pregunta\" do\n      @q1.q.should eq(\"Hola?\")\n    end\n  end\n  describe \"#Almanecamiento de Respuesta 1\" do\n    it \"Se guarda correctamente la primera respuesta\" do\n      @q1.a1[0].should eq(\"Si\")\n    end\n  end\n  describe \"#Almanecamiento de Respuesta 2\" do\n    it \"Se guarda correctamente la segunda respuesta\" do\n      @q1.a1[1].should eq(\"No\")\n    end\n  end\n  describe \"#Almanecamiento de Respuesta 3\" do\n    it \"Se guarda correctamente la tercero respuesta\" do\n      @q1.a1[2].should eq(\"Quizas\")\n    end\n  end\n  describe \"#Almanecamiento de Respuesta 4\" do\n    it \"Se guarda correctamente la cuarta respuesta\" do\n      @q1.a1[3].should eq(\"Puede\")\n    end\n  end\n  describe \"#Almanecamiento de Respuesta Correcta\" do\n    it \"Se guarda correctamente la respuesta correcta\" do\n      @q1.t.should eq(3)\n    end\n  end\n  describe \"#Mostrar Pregunta\" do\n    it \"Se muestra la pregunta correctamente\" do\n      #@q1.show()\n      @q1.a.should eq @q1.a1[0]\n    end\n  end\n  #TESTS PARA LA PRRIMERA PREGUNTA\n  describe \"#Mostrar Pregunta 1\" do\n    it \"Se muestra la pregunta correctamente\" do\n      #@q2.show()\n      @q2.a.should eq @q2.a1[1]\n    end\n  end\n  #TESTS PARA LA SEGUNDA PREGUNTA\n  describe \"#Mostrar Pregunta 2\" do\n    it \"Se muestra la pregunta correctamente\" do\n      #@q3.show()\n      @q3.a.should eq @q3.a1[0]\n    end\n  end\n  #TESTS PARA LA TERCERA PREGUNTA\n  describe \"#Mostrar Pregunta 3\" do\n    it \"Se muestra la pregunta correctamente\" do\n      #@q4.show()\n      @q4.a.should eq @q4.a1[2]\n    end\n  end\n  #TESTS PARA LA CUARTA PREGUNTA\n  describe \"#Mostrar Pregunta 4\" do\n    it \"Se muestra la pregunta correctamente\" do\n      #@q5.show()\n      @q5.a.should eq @q5.a1[3]\n    end\n  end\n  #TESTS PARA LA QUINTA PREGUNTA\n  describe \"#Mostrar Pregunta 5\" do\n    it \"Se muestra la pregunta correctamente\" do\n      #@q6.show()\n      @q6.a.should eq @q6.a1[0]\n    end\n  end\n  #TESTS varios\n  describe \"#Varios\" do\n    it \"varios tests\" do\n      expect(@q5).instance_of?(Test)\n      expect(@q6).instance_of?(Test)\n      expect(@q5).is_a?(Test)\n      expect(@q6).is_a?(Test)\n    end\n  end\n  describe \"Comparable\" do\n    it \"test de comparables\" do\n      test = @q1 == @q2\n      test.should eq(false)\n    end\n  end\n  describe \"#2 Comparables\" do\n    it \"test de comparables\" do\n      test = @q3 > @q6\n      test.should eq(true)\n    end\n  end\n  describe \"#3 Comparables\" do\n    it \"test de comparables\" do\n      test = @q2 > @q6\n      test.should eq(true)\n    end\n  end\n\tit \"Se guarda correctamente un valor\" do\n\t\t@l.head.value.should eq(@q1)\n\tend\n\tit \"El nodo tiene un apuntador\" do\n\t\t@l.head.next.should eq(nil)\n\tend\n\tit \"Funciona el metodo pushhead y el nodo anterior apunta al nuevo\" do\n\t\t@l.pushhead(@q2)\n\t\t@l.head.previous.next.should eq(@l.head)\n\tend\n\tit \"Funciona el metodo pushtail y el nodo siguiente apunta al nuevo\" do\n\t\t@l.pushtail(@q2)\n\t\t@l.tail.next.previous.should eq(@l.tail)\n\tend\n\tit \"Se pueden insertar varios elementos\" do\n\t\t@l.pushhead(@q2)\n\t\t@l.pushtail(@q3)\n\tend\n\tit \"Se puede extraer el primer elemento de la cabeza\" do\n\t\t@l.pophead.should eq(@q1)\n\tend\n\tit \"Se puede extraer el primer elemento de la cola\" do\n\t\t@l.poptail.should eq(@q1)\n\tend\n\tit \"Se pueden insertar y extraer varios elementos\" do\n\t\t@l.pushtail(@q4)\n\t\t@l.pushhead(@q5)\n\t\t@l.pophead.should eq(@q5)\n\t\t@l.poptail.should eq(@q4)\n\tend\n\tit \"Extraer de una lista vacia da error\" do\n\t\t@l.pophead.should eq(@q1)\n\t\t@l.poptail.should eq(\"No elements left\")\n\tend\n#Prct8\n\tit \"Funciona max\" do\n\t\t@l.pushhead(@q2)\n\t\t(@l.max==@q2).should eq(true)\n\t\t(@l.max==@q1).should eq(false)\n\tend\n\tit \"Funciona min\" do\n\t\t@l.pushhead(@q2)\n\t\t(@l.min==@q1).should eq(true)\n\t\t(@l.min==@q2).should eq(false)\n\tend\n\tit \"Funciona take\" do\n\t\t@l.pushhead(@q2)\n\t\t(@l.take(2)==[@q1, @q2]).should eq(true)\n\t\t(@l.take(2)==[@q2, @q1]).should eq(false)\n\tend\n\tit \"Funciona first\" do\n\t\t@l.pushhead(@q2)\n\t\t(@l.first==@q1).should eq(true)\n\t\t(@l.first==@q2).should eq(false)\n\tend\nend\n","undoManager":{"mark":-1,"position":7,"stack":[[{"group":"doc","deltas":[{"start":{"row":47,"column":6},"end":{"row":47,"column":7},"action":"insert","lines":["·"]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":6},"end":{"row":47,"column":7},"action":"remove","lines":["·"]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":6},"end":{"row":47,"column":7},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":54,"column":6},"end":{"row":54,"column":7},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":61,"column":6},"end":{"row":61,"column":7},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":68,"column":6},"end":{"row":68,"column":7},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":75,"column":6},"end":{"row":75,"column":7},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":6},"end":{"row":82,"column":7},"action":"insert","lines":["#"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":82,"column":7},"end":{"row":82,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1416575189968}